"use client"

import { createContext, useContext, useState, useEffect, ReactNode } from 'react'

interface User {
  location: {
    city: string
    state: string
    country: string
    coordinates?: {
      lat: number
      lng: number
    }
  }
  preferences: {
    theme: 'light' | 'dark'
    language: string
    notifications: boolean
  }
}

interface AuthContextType {
  location: User['location']
  preferences: User['preferences']
  updateLocation: (location: User['location']) => void
  updatePreferences: (preferences: Partial<User['preferences']>) => void
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: ReactNode }) {
  const [location, setLocation] = useState<User['location']>({
    city: 'Delhi',
    state: 'Delhi',
    country: 'India',
    coordinates: { lat: 28.6139, lng: 77.2090 }
  })

  const [preferences, setPreferences] = useState<User['preferences']>({
    theme: 'light',
    language: 'en',
    notifications: true
  })

  const updateLocation = (newLocation: User['location']) => {
    setLocation(newLocation)
  }

  const updatePreferences = (newPreferences: Partial<User['preferences']>) => {
    setPreferences(prev => ({ ...prev, ...newPreferences }))
  }

  useEffect(() => {
    // Load saved preferences from localStorage
    const savedPrefs = localStorage.getItem('preferences')
    if (savedPrefs) {
      try {
        const parsed = JSON.parse(savedPrefs)
        setPreferences(prev => ({ ...prev, ...parsed }))
      } catch (e) {
        console.error('Failed to parse saved preferences')
      }
    }
  }, [])

  useEffect(() => {
    // Save preferences to localStorage when they change
    localStorage.setItem('preferences', JSON.stringify(preferences))
  }, [preferences])

  const value = {
    location,
    preferences,
    updateLocation,
    updatePreferences
  }

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}
