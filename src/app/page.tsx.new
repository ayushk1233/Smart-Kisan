'use client';

import { useState, useEffect } from 'react';
import { 
  HomeIcon, Package, CloudRain, Brain, MessageCircle, TrendingUp, 
  Users, Menu, MapPin, Sprout, Plus, Sun, AlertTriangle, Clock, 
  DollarSign, Search, Bell, User, Settings, LogOut, X, ArrowRight,
  Bot, Calendar, BookOpen
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardHeader, CardTitle, CardContent, CardDescription } from '@/components/ui/card';
import Hero from '@/components/Hero';
import LoginModal from '@/components/LoginModal';
import { useAuth } from '@/contexts/AuthContext';
import InventoryManagement from '@/features/inventory/InventoryManagement';
import WeatherDashboard from '@/features/weather/WeatherDashboard';
import AICropAdvisor from '@/features/ai-crop-advisor/AICropAdvisor';
import AIChat from '@/features/ai-chat/AIChat';
import MarketDashboard from '@/features/market/MarketDashboard';
import LocationSelector from '@/components/LocationSelector';
import ThemeToggle from '@/components/ThemeToggle';

// Types
interface User {
  location?: {
    city: string;
    state: string;
  };
}

interface DashboardProps {
  user: User;
  activeTab: string;
  setActiveTab: (tab: string) => void;
}

// Constants
const tabs = [
  { id: 'overview', name: 'Overview', icon: HomeIcon, color: 'from-amber-500 to-orange-600' },
  { id: 'inventory', name: 'Inventory', icon: Package, color: 'from-green-500 to-emerald-600' },
  { id: 'weather', name: 'Weather', icon: CloudRain, color: 'from-sky-500 to-blue-600' },
  { id: 'ai-tools', name: 'AI Tools', icon: Brain, color: 'from-purple-500 to-indigo-600' },
  { id: 'ai-chat', name: 'AI Chat', icon: MessageCircle, color: 'from-purple-500 to-pink-600' },
  { id: 'market', name: 'Market', icon: TrendingUp, color: 'from-orange-500 to-amber-600' },
  { id: 'community', name: 'Community', icon: Users, color: 'from-teal-500 to-green-600' },
];

// Components
const Dashboard = ({ user, activeTab, setActiveTab }: DashboardProps) => {
  switch (activeTab) {
    case 'inventory':
      return <InventoryManagement />;
    case 'weather':
      return <WeatherDashboard />;
    case 'ai-tools':
      return <AICropAdvisor />;
    case 'ai-chat':
      return <AIChat />;
    case 'market':
      return <MarketDashboard />;
    default:
      return null;
  }
};

export default function Home() {
  const { user, isAuthenticated, logout } = useAuth();
  const [activeTab, setActiveTab] = useState('overview');
  const [showLoginModal, setShowLoginModal] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [notificationsOpen, setNotificationsOpen] = useState(false);
  const [userMenuOpen, setUserMenuOpen] = useState(false);
  const [showLocationModal, setShowLocationModal] = useState(false);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Element;
      if (!target.closest('.dropdown-container')) {
        setSearchTerm('');
        setNotificationsOpen(false);
        setUserMenuOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  if (!isAuthenticated) {
    return (
      <main className="min-h-screen">
        <Hero onLogin={() => setShowLoginModal(true)} />
        <LoginModal isOpen={showLoginModal} onClose={() => setShowLoginModal(false)} />
      </main>
    );
  }

  if (!user) {
    return null;
  }

  return (
    <div className="min-h-screen" style={{ background: 'var(--background)' }}>
      <header className="border-b border-slate-200 shadow-sm sticky top-0 z-50" style={{ backgroundColor: 'var(--card)' }}>
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSidebarOpen(!sidebarOpen)}
                className="lg:hidden p-2"
              >
                <Menu className="w-6 h-6" />
              </Button>
              
              <div className="flex items-center space-x-3">
                <div className="w-10 h-10 bg-gradient-to-br from-green-500 to-emerald-600 rounded-xl flex items-center justify-center shadow-lg">
                  <Sprout className="w-6 h-6 text-white" />
                </div>
                <div>
                  <h1 className="text-2xl font-bold" style={{ color: 'var(--foreground)' }}>Smart Kisan</h1>
                  <div className="flex items-center space-x-2">
                    <p className="text-sm" style={{ color: 'var(--muted-foreground)' }}>Intelligent Farming Solutions</p>
                    {user?.location && (
                      <>
                        <span style={{ color: 'var(--muted-foreground)' }}>â€¢</span>
                        <div className="flex items-center space-x-1 text-sm" style={{ color: 'var(--muted-foreground)' }}>
                          <MapPin className="w-3 h-3" />
                          <span>{user.location.city}, {user.location.state}</span>
                        </div>
                      </>
                    )}
                  </div>
                </div>
              </div>
            </div>

            <nav className="hidden lg:flex items-center space-x-1">
              {tabs.map((tab) => (
                <Button
                  key={tab.id}
                  variant={activeTab === tab.id ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => setActiveTab(tab.id)}
                  className="flex items-center space-x-2"
                >
                  <tab.icon className="w-4 h-4" />
                  <span>{tab.name}</span>
                </Button>
              ))}
            </nav>

            <div className="flex items-center space-x-2">
              <LocationSelector
                isOpen={showLocationModal}
                onClose={() => setShowLocationModal(false)}
              />
              <ThemeToggle />
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 py-8">
        <Dashboard user={user} activeTab={activeTab} setActiveTab={setActiveTab} />
      </main>

      {/* Mobile Overlay */}
      {sidebarOpen && (
        <div 
          className="fixed inset-0 z-30 lg:hidden"
          style={{ backgroundColor: 'rgba(0, 0, 0, 0.5)' }}
          onClick={() => setSidebarOpen(false)}
        />
      )}

      {/* Floating AI Chat Button */}
      <div className="fixed bottom-6 right-6 z-50">
        <Button
          onClick={() => setActiveTab('ai-chat')}
          className="bg-gradient-to-r from-purple-500 to-pink-600 hover:from-purple-600 hover:to-pink-700 text-white p-4 rounded-full shadow-2xl transition-all duration-300 transform hover:scale-110 animate-bounce"
          size="lg"
        >
          <MessageCircle className="w-6 h-6" />
        </Button>
      </div>

      {/* Modals */}
      <LoginModal 
        isOpen={showLoginModal} 
        onClose={() => setShowLoginModal(false)} 
      />
      <LocationSelector 
        isOpen={showLocationModal} 
        onClose={() => setShowLocationModal(false)} 
      />
    </div>
  );
}
